Thought Process for Implementing Profile UI:

**1. Understand Requirements & Constraints:** - UI based on the provided image. - Data sourced from the provided JSON schema. - Implement using BLoC pattern. - Exclude: Avatar, achievements, metric graph. - Key UI sections: User's name, "Overview" (Day streak, Total XP, League, Top 3 finishes), "Follow" button, and navigation tabs (Courses, Following, Followers).

**2. Analyze Provided JSON Schema:** - Relevant fields for UI: - `fullName`: For user's name display. - `experience`: For "Total XP" card. - `streak`: For "Day streak" card. - Fields _not_ directly in schema for UI elements from image: - "League" - "Top 3 finishes" - Other fields like `_id`, `email`, `languages`, `hearts` are available but not directly requested for the visible summary cards, except `avatar` which is explicitly excluded.

**3. Initial Codebase Exploration (Simulated based on provided search results):** - Project Structure: Flutter project in `mobile/` with `lib/` for Dart code. - Existing User Model: `mobile/lib/domain/models/user.dart`. Contains `fullName`, `experience`, `streak`, `hearts`, `avatar`, `languages`. This is a good match. - Existing Repository: `UserRepo` (`mobile/lib/domain/repos/user_repo.dart` and its implementation) exists and handles user data, including `watchUserInfo()`. - Existing BLoC Usage: `AuthBloc`, `LoginBloc`, `RegisterBloc`, `HomeBloc` confirm BLoC is an established pattern. `HomeBloc` uses `_userRepo.watchUserInfo()` to get `streak` and `hearts`. - Existing Profile Screen: `mobile/lib/modules/profile/profile_view.dart` is basic (logout button only). This is the target for enhancement.

**4. Detailed Implementation Plan (BLoC, UI):**

    **A. Data Layer & Model:**
        - The existing `User` model (`mobile/lib/domain/models/user.dart`) is largely sufficient for the required fields (`fullName`, `experience`, `streak`). No immediate changes seem necessary for the core requirements.
        - The existing `UserRepo` can be used to fetch this `User` object. `watchUserInfo()` is suitable for the current user's profile. If viewing other profiles becomes a requirement, `UserRepo` would need a new method (e.g., `getUserById(String userId)`).

    **B. BLoC Layer (New: `ProfileBloc`):**
        - **File Location:** `mobile/lib/modules/profile/bloc/`
        - **Events (`profile_event.dart`):**
            - `LoadUserProfile`: Event to trigger data fetching.
            - (Potentially `RefreshUserProfile` if pull-to-refresh is desired later).
        - **States (`profile_state.dart`):**
            - `ProfileInitial extends Equatable`
            - `ProfileLoadInProgress extends Equatable`
            - `ProfileLoadSuccess extends Equatable { final User user; ... }`
            - `ProfileLoadFailure extends Equatable { final String error; ... }`
        - **Bloc (`profile_bloc.dart`):**
            - `ProfileBloc(userRepo: _userRepo)`
            - Constructor: `add(LoadUserProfile())` or listen to `userRepo.watchUserInfo()`.
                - Using `watchUserInfo()` from `UserRepo` seems more aligned with existing patterns (e.g., `HomeBloc`) for displaying current user data and getting live updates.
            - Event Handler for `LoadUserProfile` (if not using `watchUserInfo` directly in `emit.forEach`):
                - Emit `ProfileLoadInProgress`.
                - Try:
                    - Fetch user data using `_userRepo.getUserInfo()` (for one-time fetch) or subscribe to `_userRepo.watchUserInfo()`.
                    - If using `watchUserInfo()`:
                        ```dart
                        // In ProfileBloc constructor or an init method
                        _userSubscription = _userRepo.watchUserInfo().listen((user) {
                          if (user != null) {
                            add(_UserProfileUpdated(user)); // Internal event
                          } else {
                            // Handle case where user info becomes null (e.g., after logout elsewhere)
                            add(_UserProfileEmptied()); // Internal event
                          }
                        });

                        on<_UserProfileUpdated>((event, emit) => emit(ProfileLoadSuccess(user: event.user)));
                        on<_UserProfileEmptied>((event, emit) => emit(ProfileLoadFailure(error: "User data not available"))); // Or a specific empty state
                        ```
                    - Emit `ProfileLoadSuccess` with the user data.
                - Catch:
                    - Emit `ProfileLoadFailure` with an error message.
            - Remember to cancel stream subscriptions in `close()`.

    **C. UI Layer (`mobile/lib/modules/profile/profile_view.dart`):**
        - **Widget Structure:**
            ```
            ProfilePage (StatelessWidget)
              -> BlocProvider<ProfileBloc>(create: (_) => ProfileBloc(userRepo: getIt<UserRepo>())..add(LoadUserProfile()) // Or rely on watchUserInfo
                -> ProfileView (StatelessWidget)
            ```
        - **`ProfileView`:**
            - Use `BlocBuilder<ProfileBloc, ProfileState>` to build UI based on state.
            - Handle `ProfileLoadInProgress`: Show `CircularProgressIndicator`.
            - Handle `ProfileLoadFailure`: Show error message.
            - Handle `ProfileLoadSuccess`: Display profile data.
                - `Scaffold`
                    - `AppBar`: `Text('Profile')` or `Text(state.user.fullName)`
                    - `Body`: `SingleChildScrollView` -> `Padding` -> `Column`
                        - **User Name Header:** `Text(state.user.fullName, style: TextStyle(...big...))`
                        - **"Overview" Title:** `Text("Overview", style: TextStyle(...section title...))`
                        - **Overview Cards Section:** Use `GridView.count` (for 2x2 layout) or `Column` of `Row`s. Each card is a `Card` widget.
                            - **Day Streak Card:**
                                - `Icon(Icons.local_fire_department)` (or similar)
                                - `Text("${state.user.streak}")`
                                - `Text("Day streak")`
                            - **Total XP Card:**
                                - `Icon(Icons.flash_on)` (or similar)
                                - `Text("${state.user.experience}")`
                                - `Text("Total XP")`
                            - **League Card:**
                                - **Decision:** Not in schema.
                                - **Option 1 (Omit):** Don't show.
                                - **Option 2 (Placeholder):** `Icon(...)`, `Text("Silver")`, `Text("League")`. Add "WEEK 1" badge if desired (static for now).
                                - **Action:** State clearly that this is a placeholder or needs backend changes.
                            - **Top 3 Finishes Card:**
                                - **Decision:** Not in schema.
                                - **Option 1 (Omit):** Don't show.
                                - **Option 2 (Placeholder):** `Icon(...)`, `Text("1")`, `Text("Top 3 finishes")`.
                                - **Action:** State clearly.
                        - **"Follow" Button (Conditional):**
                            - **Decision:** Screen is for the current user's profile. Omit this button. If the scope changes to viewing other users' profiles, this needs reconsideration + backend support.
                        - **Logout Button (already present):** Keep or integrate into a menu.

    **D. Navigation & Tabs:**
        - The "Courses", "Following", "Followers" tabs are likely part of a higher-level navigation widget (e.g., `BottomNavigationBar` in a main scaffold that hosts `ProfilePage` as one of its children).
        - The implementation here focuses on the content *of* the profile screen itself.

    **E. Styling:**
        - Use `Theme.of(context)` for consistent styling.
        - Leverage existing `context.colorTheme` if applicable.
        - `Card` widgets for overview items.
        - `Padding`, `SizedBox` for spacing.
        - `TextStyle` for various text elements.

**5. Addressing Gaps and Assumptions:** - **League & Top 3 Finishes:** Explicitly state these are not in the current user data schema and suggest options (omit, placeholder, or flag as future work requiring backend changes). The "WEEK 1" badge is tied to "League". - **Follow Button:** Assume this is the current user's profile page, so no "Follow" button is needed. If it's for other users, it's a more complex feature. - **Avatar, Achievements, Graph:** Confirmed as out of scope. - **Data Source:** The `UserRepo` will provide the `User` object. How `UserRepo` fetches it (API call, local cache) is abstracted away from the BLoC and UI. - **Error Handling:** Ensure `ProfileLoadFailure` state displays a user-friendly error. - **Loading State:** Ensure `ProfileLoadInProgress` provides visual feedback.

**Final Output Structure:** - A text file containing these thoughts. - No direct code generation for files unless explicitly asked to modify `profile_view.dart`. - Focus on the "what to do" and "how to think about it" using BLoC.
